import React, { useState, useEffect, useRef } from 'react';
import { useAuth } from '../contexts/AuthContext';
import './LobbyCharacterCreator.css';

const LobbyCharacterCreator = ({ onClose, onCharacterSaved }) => {
  const { user } = useAuth();
  const canvasRef = useRef(null);
  const [isLoading, setIsLoading] = useState(false);
  const [character, setCharacter] = useState({
    name: user?.username || '',
    gender: 'male',
    skinTone: 'light',
    hair: {
      style: 'short_messy',
      color: '#8B4513'
    },
    face: {
      eyes: 'normal',
      eyeColor: '#4B4B4D',
      nose: 'normal',
      mouth: 'smile'
    },
    clothing: {
      hat: null,
      top: 'basic_shirt',
      bottom: 'basic_pants',
      shoes: 'sneakers',
      accessories: []
    },
    equipment: {
      weapon: null,
      shield: null,
      gloves: null,
      belt: null
    }
  });

  const [currentDirection, setCurrentDirection] = useState('down');
  const [generatedImages, setGeneratedImages] = useState({});

  // Ïä§ÌÉÄÏùº ÏòµÏÖòÎì§
  const hairStyles = {
    short_messy: { name: 'Îã®Î∞ú ÌóùÌÅ¥Ïñ¥ÏßÑ', icon: 'üßë' },
    long_straight: { name: 'Í∏¥ ÏßÅÎ™®', icon: 'üë©' },
    curly: { name: 'Í≥±Ïä¨Î®∏Î¶¨', icon: 'üë®‚Äçü¶±' },
    bald: { name: 'ÎåÄÎ®∏Î¶¨', icon: 'üë®‚Äçü¶≤' },
    ponytail: { name: 'Ìè¨ÎãàÌÖåÏùº', icon: 'üë©‚Äçü¶≥' },
    braids: { name: 'ÎïãÏùÄÎ®∏Î¶¨', icon: 'üë±‚Äç‚ôÄÔ∏è' }
  };

  const clothingOptions = {
    tops: {
      basic_shirt: { name: 'Í∏∞Î≥∏ ÏÖîÏ∏†', icon: 'üëî' },
      hoodie: { name: 'ÌõÑÎìúÌã∞', icon: 'ü•Ω' },
      tank_top: { name: 'ÌÉ±ÌÅ¨ÌÜ±', icon: 'üéΩ' },
      dress_shirt: { name: 'ÎìúÎ†àÏä§ ÏÖîÏ∏†', icon: 'üëî' },
      jacket: { name: 'Ïû¨ÌÇ∑', icon: 'üß•' },
      armor_light: { name: 'Í∞ÄÎ≤ºÏö¥ Í∞ëÏò∑', icon: 'ü¶∫' },
      armor_heavy: { name: 'Î¨¥Í±∞Ïö¥ Í∞ëÏò∑', icon: '‚öîÔ∏è' }
    },
    bottoms: {
      basic_pants: { name: 'Í∏∞Î≥∏ Î∞îÏßÄ', icon: 'üëñ' },
      jeans: { name: 'Ï≤≠Î∞îÏßÄ', icon: 'üëï' },
      shorts: { name: 'Î∞òÎ∞îÏßÄ', icon: 'ü©≥' },
      skirt: { name: 'ÏπòÎßà', icon: 'üëó' },
      formal_pants: { name: 'Ï†ïÏû• Î∞îÏßÄ', icon: 'üëî' },
      armor_legs: { name: 'Îã§Î¶¨ Í∞ëÏò∑', icon: 'üõ°Ô∏è' }
    },
    shoes: {
      sneakers: { name: 'Ïö¥ÎèôÌôî', icon: 'üëü' },
      boots: { name: 'Î∂ÄÏ∏†', icon: 'ü•æ' },
      sandals: { name: 'ÏÉåÎì§', icon: 'üë°' },
      dress_shoes: { name: 'Íµ¨Îëê', icon: 'üëû' },
      armor_boots: { name: 'Í∞ëÏò∑ Î∂ÄÏ∏†', icon: 'üë¢' }
    },
    hats: {
      baseball_cap: { name: 'ÏïºÍµ¨Î™®Ïûê', icon: 'üß¢' },
      beanie: { name: 'ÎπÑÎãà', icon: 'üé©' },
      helmet: { name: 'Ìó¨Î©ß', icon: '‚õëÔ∏è' },
      crown: { name: 'ÏôïÍ¥Ä', icon: 'üëë' },
      witch_hat: { name: 'ÎßàÎ≤ïÏÇ¨ Î™®Ïûê', icon: 'üßô‚Äç‚ôÇÔ∏è' }
    }
  };

  const skinTones = {
    light: '#FDB4A6',
    medium: '#D2936B',
    dark: '#8B5A3C',
    tan: '#C49A81'
  };

  // 4Î∞©Ìñ• Ïù¥ÎØ∏ÏßÄ ÏÉùÏÑ±
  const generateAllDirections = async () => {
    const directions = ['up', 'down', 'left', 'right'];
    const images = {};
    
    for (const direction of directions) {
      const imageData = await renderCharacter(direction);
      images[direction] = imageData;
    }
    
    setGeneratedImages(images);
    return images;
  };

  // Ï∫êÎ¶≠ÌÑ∞ Î†åÎçîÎßÅ Ìï®Ïàò
  const renderCharacter = async (direction = 'down') => {
    const canvas = canvasRef.current;
    if (!canvas) return null;

    const ctx = canvas.getContext('2d');
    const size = 64;
    
    canvas.width = size;
    canvas.height = size;
    ctx.clearRect(0, 0, size, size);
    
    // Í∏∞Î≥∏ Ïã†Ï≤¥ Í∑∏Î¶¨Í∏∞
    await drawBodyBase(ctx, direction, size);
    
    // ÏùòÎ•ò Î†àÏù¥Ïñ¥Î≥ÑÎ°ú Í∑∏Î¶¨Í∏∞
    await drawClothingLayers(ctx, direction, size);
    
    return canvas.toDataURL();
  };

  const drawBodyBase = async (ctx, direction, size) => {
    const baseColor = skinTones[character.skinTone];
    
    // Î®∏Î¶¨
    ctx.fillStyle = baseColor;
    ctx.fillRect(16, 8, 32, 32);
    
    // Îàà
    const eyeOffset = getDirectionOffset(direction);
    ctx.fillStyle = character.face.eyeColor;
    ctx.fillRect(20 + eyeOffset.x, 16 + eyeOffset.y, 4, 4);
    ctx.fillRect(28 + eyeOffset.x, 16 + eyeOffset.y, 4, 4);
    
    // Î®∏Î¶¨Ïπ¥ÎùΩ
    ctx.fillStyle = character.hair.color;
    switch (character.hair.style) {
      case 'short_messy':
        ctx.fillRect(14, 6, 36, 10);
        break;
      case 'long_straight':
        ctx.fillRect(14, 6, 36, 18);
        break;
      case 'curly':
        ctx.fillRect(12, 6, 40, 12);
        break;
      case 'bald':
        // Î®∏Î¶¨Ïπ¥ÎùΩ ÏóÜÏùå
        break;
      default:
        ctx.fillRect(14, 6, 36, 10);
    }
    
    // Î™∏ÌÜµ
    ctx.fillStyle = baseColor;
    ctx.fillRect(20, 32, 24, 20);
    
    // Ìåî
    const armOffset = getArmOffset(direction);
    ctx.fillRect(12 + armOffset.left.x, 32 + armOffset.left.y, 8, 20);
    ctx.fillRect(44 + armOffset.right.x, 32 + armOffset.right.y, 8, 20);
    
    // Îã§Î¶¨
    ctx.fillRect(22, 52, 8, 12);
    ctx.fillRect(34, 52, 8, 12);
  };

  const drawClothingLayers = async (ctx, direction, size) => {
    const colors = {
      basic_shirt: '#4169E1',
      hoodie: '#708090',
      basic_pants: '#2F4F4F',
      jeans: '#1E90FF',
      sneakers: '#FFFFFF',
      boots: '#8B4513'
    };
    
    // ÏÉÅÏùò
    if (character.clothing.top) {
      ctx.fillStyle = colors[character.clothing.top] || '#888888';
      ctx.fillRect(20, 32, 24, 20);
    }
    
    // ÌïòÏùò
    if (character.clothing.bottom) {
      ctx.fillStyle = colors[character.clothing.bottom] || '#888888';
      ctx.fillRect(22, 45, 20, 19);
    }
    
    // Ïã†Î∞ú
    if (character.clothing.shoes) {
      ctx.fillStyle = colors[character.clothing.shoes] || '#888888';
      ctx.fillRect(22, 60, 8, 4);
      ctx.fillRect(34, 60, 8, 4);
    }
    
    // Î™®Ïûê
    if (character.clothing.hat) {
      ctx.fillStyle = colors[character.clothing.hat] || '#888888';
      ctx.fillRect(16, 4, 32, 8);
    }
  };

  const getDirectionOffset = (direction) => {
    switch (direction) {
      case 'up': return { x: 0, y: -2 };
      case 'down': return { x: 0, y: 0 };
      case 'left': return { x: -2, y: 0 };
      case 'right': return { x: 2, y: 0 };
      default: return { x: 0, y: 0 };
    }
  };

  const getArmOffset = (direction) => {
    switch (direction) {
      case 'up':
        return { left: { x: 0, y: -2 }, right: { x: 0, y: -2 } };
      case 'down':
        return { left: { x: 0, y: 0 }, right: { x: 0, y: 0 } };
      case 'left':
        return { left: { x: -2, y: 0 }, right: { x: 2, y: 0 } };
      case 'right':
        return { left: { x: -2, y: 0 }, right: { x: 2, y: 0 } };
      default:
        return { left: { x: 0, y: 0 }, right: { x: 0, y: 0 } };
    }
  };

  // Ï∫êÎ¶≠ÌÑ∞ Î≥ÄÍ≤Ω Ïãú ÏûêÎèô Î†åÎçîÎßÅ
  useEffect(() => {
    renderCharacter(currentDirection);
  }, [character, currentDirection]);

  const handleSaveCharacter = async () => {
    if (!character.name.trim()) {
      alert('Ï∫êÎ¶≠ÌÑ∞ Ïù¥Î¶ÑÏùÑ ÏûÖÎ†•Ìï¥Ï£ºÏÑ∏Ïöî.');
      return;
    }

    setIsLoading(true);
    try {
      // 4Î∞©Ìñ• Ïù¥ÎØ∏ÏßÄ ÏÉùÏÑ±
      const allDirectionImages = await generateAllDirections();
      
      // ÏÑúÎ≤ÑÏóê Ï†ÄÏû•
      const response = await fetch('/api/character/custom', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${localStorage.getItem('token')}`
        },
        body: JSON.stringify({
          name: character.name,
          customization: character,
          images: allDirectionImages,
          size: 64
        })
      });

      const result = await response.json();
      
      if (result.success) {
        alert('Ï∫êÎ¶≠ÌÑ∞Í∞Ä Ï†ÄÏû•ÎêòÏóàÏäµÎãàÎã§!');
        onCharacterSaved && onCharacterSaved(result.character);
        onClose();
      } else {
        alert(`Ï†ÄÏû• Ïã§Ìå®: ${result.message}`);
      }
    } catch (error) {
      console.error('Ï∫êÎ¶≠ÌÑ∞ Ï†ÄÏû• Ïò§Î•ò:', error);
      alert('Ï∫êÎ¶≠ÌÑ∞ Ï†ÄÏû• Ï§ë Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§.');
    } finally {
      setIsLoading(false);
    }
  };

  const handleCharacterChange = (category, subcategory, value) => {
    setCharacter(prev => ({
      ...prev,
      [category]: {
        ...prev[category],
        [subcategory]: value
      }
    }));
  };

  return (
    <div className="lobby-character-creator-overlay">
      <div className="lobby-character-creator">
        <div className="creator-header">
          <h2>üé® Ï∫êÎ¶≠ÌÑ∞ Ïª§Ïä§ÌÑ∞ÎßàÏù¥Ïßï</h2>
          <button className="close-btn" onClick={onClose}>‚úï</button>
        </div>

        <div className="creator-content">
          {/* Ï∫êÎ¶≠ÌÑ∞ ÎØ∏Î¶¨Î≥¥Í∏∞ */}
          <div className="character-preview">
            <h3>ÎØ∏Î¶¨Î≥¥Í∏∞</h3>
            <div className="preview-canvas">
              <canvas ref={canvasRef} width="64" height="64" />
            </div>
            
            <div className="direction-controls">
              <button 
                className={`direction-btn ${currentDirection === 'up' ? 'active' : ''}`}
                onClick={() => setCurrentDirection('up')}
              >
                ‚Üë
              </button>
              <div className="direction-row">
                <button 
                  className={`direction-btn ${currentDirection === 'left' ? 'active' : ''}`}
                  onClick={() => setCurrentDirection('left')}
                >
                  ‚Üê
                </button>
                <button 
                  className={`direction-btn ${currentDirection === 'down' ? 'active' : ''}`}
                  onClick={() => setCurrentDirection('down')}
                >
                  ‚Üì
                </button>
                <button 
                  className={`direction-btn ${currentDirection === 'right' ? 'active' : ''}`}
                  onClick={() => setCurrentDirection('right')}
                >
                  ‚Üí
                </button>
              </div>
            </div>
          </div>

          {/* Ïª§Ïä§ÌÑ∞ÎßàÏù¥Ïßï ÏòµÏÖò */}
          <div className="customization-panel">
            {/* Í∏∞Î≥∏ Ï†ïÎ≥¥ */}
            <div className="option-section">
              <h3>Í∏∞Î≥∏ Ï†ïÎ≥¥</h3>
              <div className="option-group">
                <label>Ïù¥Î¶Ñ:</label>
                <input 
                  type="text" 
                  value={character.name}
                  onChange={(e) => setCharacter(prev => ({...prev, name: e.target.value}))}
                  placeholder="Ï∫êÎ¶≠ÌÑ∞ Ïù¥Î¶Ñ"
                />
              </div>
              
              <div className="option-group">
                <label>ÏÑ±Î≥Ñ:</label>
                <select 
                  value={character.gender}
                  onChange={(e) => setCharacter(prev => ({...prev, gender: e.target.value}))}
                >
                  <option value="male">ÎÇ®ÏÑ±</option>
                  <option value="female">Ïó¨ÏÑ±</option>
                  <option value="neutral">Ï§ëÏÑ±</option>
                </select>
              </div>

              <div className="option-group">
                <label>ÌîºÎ∂ÄÌÜ§:</label>
                <div className="skin-tone-options">
                  {Object.entries(skinTones).map(([key, color]) => (
                    <button
                      key={key}
                      className={`skin-tone-btn ${character.skinTone === key ? 'active' : ''}`}
                      style={{ backgroundColor: color }}
                      onClick={() => setCharacter(prev => ({...prev, skinTone: key}))}
                    />
                  ))}
                </div>
              </div>
            </div>

            {/* Ìó§Ïñ¥ Ïä§ÌÉÄÏùº */}
            <div className="option-section">
              <h3>Ìó§Ïñ¥ Ïä§ÌÉÄÏùº</h3>
              <div className="option-group">
                <label>Ïä§ÌÉÄÏùº:</label>
                <div className="style-grid">
                  {Object.entries(hairStyles).map(([key, style]) => (
                    <button
                      key={key}
                      className={`style-btn ${character.hair.style === key ? 'active' : ''}`}
                      onClick={() => handleCharacterChange('hair', 'style', key)}
                    >
                      <span className="style-icon">{style.icon}</span>
                      <span className="style-name">{style.name}</span>
                    </button>
                  ))}
                </div>
              </div>
              
              <div className="option-group">
                <label>ÏÉâÏÉÅ:</label>
                <input 
                  type="color" 
                  value={character.hair.color}
                  onChange={(e) => handleCharacterChange('hair', 'color', e.target.value)}
                />
              </div>
            </div>

            {/* ÏùòÎ•ò */}
            <div className="option-section">
              <h3>ÏùòÎ•ò</h3>
              
              <div className="option-group">
                <label>ÏÉÅÏùò:</label>
                <div className="style-grid">
                  {Object.entries(clothingOptions.tops).map(([key, item]) => (
                    <button
                      key={key}
                      className={`style-btn ${character.clothing.top === key ? 'active' : ''}`}
                      onClick={() => handleCharacterChange('clothing', 'top', key)}
                    >
                      <span className="style-icon">{item.icon}</span>
                      <span className="style-name">{item.name}</span>
                    </button>
                  ))}
                </div>
              </div>

              <div className="option-group">
                <label>ÌïòÏùò:</label>
                <div className="style-grid">
                  {Object.entries(clothingOptions.bottoms).map(([key, item]) => (
                    <button
                      key={key}
                      className={`style-btn ${character.clothing.bottom === key ? 'active' : ''}`}
                      onClick={() => handleCharacterChange('clothing', 'bottom', key)}
                    >
                      <span className="style-icon">{item.icon}</span>
                      <span className="style-name">{item.name}</span>
                    </button>
                  ))}
                </div>
              </div>

              <div className="option-group">
                <label>Ïã†Î∞ú:</label>
                <div className="style-grid">
                  {Object.entries(clothingOptions.shoes).map(([key, item]) => (
                    <button
                      key={key}
                      className={`style-btn ${character.clothing.shoes === key ? 'active' : ''}`}
                      onClick={() => handleCharacterChange('clothing', 'shoes', key)}
                    >
                      <span className="style-icon">{item.icon}</span>
                      <span className="style-name">{item.name}</span>
                    </button>
                  ))}
                </div>
              </div>

              <div className="option-group">
                <label>Î™®Ïûê:</label>
                <div className="style-grid">
                  <button
                    className={`style-btn ${!character.clothing.hat ? 'active' : ''}`}
                    onClick={() => handleCharacterChange('clothing', 'hat', null)}
                  >
                    <span className="style-icon">üö´</span>
                    <span className="style-name">ÏóÜÏùå</span>
                  </button>
                  {Object.entries(clothingOptions.hats).map(([key, item]) => (
                    <button
                      key={key}
                      className={`style-btn ${character.clothing.hat === key ? 'active' : ''}`}
                      onClick={() => handleCharacterChange('clothing', 'hat', key)}
                    >
                      <span className="style-icon">{item.icon}</span>
                      <span className="style-name">{item.name}</span>
                    </button>
                  ))}
                </div>
              </div>
            </div>
          </div>
        </div>

        <div className="creator-actions">
          <button className="cancel-btn" onClick={onClose}>
            Ï∑®ÏÜå
          </button>
          <button 
            className="save-btn" 
            onClick={handleSaveCharacter}
            disabled={isLoading}
          >
            {isLoading ? 'Ï†ÄÏû• Ï§ë...' : 'Ï∫êÎ¶≠ÌÑ∞ Ï†ÄÏû•'}
          </button>
        </div>
      </div>
    </div>
  );
};

export default LobbyCharacterCreator;