import React, { useState, useEffect } from 'react';
import './PersonalShop.css';
import paymentService from '../services/paymentService';
import MultiPayment from './MultiPayment';
import paymentConfigService from '../services/paymentConfigService';

const PersonalShop = ({ isOpen, onClose, userId, username, currentMap, roomData }) => {
  const [activeTab, setActiveTab] = useState('products');
  const [products, setProducts] = useState([]);
  const [cart, setCart] = useState([]);
  const [isLoading, setIsLoading] = useState(false);
  const [searchTerm, setSearchTerm] = useState('');
  const [externalLinks, setExternalLinks] = useState([]);
  const [isEditingLinks, setIsEditingLinks] = useState(false);
  const [newLink, setNewLink] = useState({ name: '', url: '', description: '' });
  const [isAdmin, setIsAdmin] = useState(false);
  const [adminPassword, setAdminPassword] = useState('');
  const [editingProduct, setEditingProduct] = useState(null);
  const [newProduct, setNewProduct] = useState({
    name: '',
    price: '',
    image: '',
    category: 'avatar',
    description: '',
    stock: '',
    tags: []
  });
  const [orders, setOrders] = useState([]);
  const [salesData, setSalesData] = useState({
    todayVisitors: 24,
    totalSales: 156,
    totalRevenue: 2340000,
    monthlyRevenue: 890000
  });

  // ÏáºÌïëÎ™∞ Ï†ïÎ≥¥
  const [shopInfo, setShopInfo] = useState({
    ownerId: null,
    ownerName: '',
    isOwnShop: false,
    canManage: false,
    paymentEnabled: false
  });

  // Î©îÌÉÄÎ≤ÑÏä§ Ï†ÑÏö© ÏÉÅÌíà Îç∞Ïù¥ÌÑ∞
  const sampleProducts = [
    {
      id: 1,
      name: 'ÌôÄÎ°úÍ∑∏Îû® ÏïÑÎ∞îÌÉÄ Ïä§ÌÇ®',
      price: 25000,
      image: '‚ú®',
      category: 'avatar',
      description: 'ÎØ∏ÎûòÏ†ÅÏù∏ ÌôÄÎ°úÍ∑∏Îû® Ìö®Í≥ºÍ∞Ä Ï†ÅÏö©Îêú ÌîÑÎ¶¨ÎØ∏ÏóÑ ÏïÑÎ∞îÌÉÄ Ïä§ÌÇ®',
      stock: 10,
      featured: true,
      tags: ['Ïã†ÏÉÅÌíà', 'VIP']
    },
    {
      id: 2,
      name: 'Î©îÌÉÄÎ≤ÑÏä§ Ï†ÑÏö© Ïù¥Î™®ÏßÄ',
      price: 12000,
      image: 'ü§ñ',
      category: 'emoticon',
      description: 'Î©îÌÉÄÎ≤ÑÏä§ÏóêÏÑúÎßå ÏÇ¨Ïö© Í∞ÄÎä•Ìïú ÌäπÎ≥ÑÌïú 3D Ïù¥Î™®ÏßÄ 50Í∞ú ÏÑ∏Ìä∏',
      stock: 50,
      tags: ['Ïù∏Í∏∞ÏÉÅÌíà']
    },
    {
      id: 3,
      name: 'ÌîÑÎùºÏù¥Îπó Í∞ÄÏÉÅ Í≥µÍ∞Ñ',
      price: 45000,
      image: 'üè∞',
      category: 'space',
      description: 'ÎÇòÎßåÏùò Í∞úÏù∏ Í∞ÄÏÉÅ Í≥µÍ∞Ñ - ÏÇ¨Ïù¥Î≤ÑÌéëÌÅ¨ ÌÖåÎßà',
      stock: 5,
      featured: true,
      tags: ['ÌïúÏ†ïÌåê', 'ÌîÑÎ¶¨ÎØ∏ÏóÑ']
    },
    {
      id: 4,
      name: 'ÎÑ§Ïò® ÌîÑÎ°úÌïÑ ÌÖåÎëêÎ¶¨',
      price: 18000,
      image: 'üí´',
      category: 'effect',
      description: 'ÌôîÎ†§Ìïú ÎÑ§Ïò® Ìö®Í≥ºÏùò ÌîÑÎ°úÌïÑ ÌÖåÎëêÎ¶¨ 20Ï¢Ö Ìå®ÌÇ§ÏßÄ',
      stock: 30,
      tags: ['ÌôîÏ†úÏÉÅÌíà']
    },
    {
      id: 5,
      name: 'Î≥¥Ïù¥Ïä§ Î™®ÎìàÎ†àÏù¥ÌÑ∞',
      price: 22000,
      image: 'üéôÔ∏è',
      category: 'voice',
      description: 'ÏùåÏÑ± Î≥ÄÏ°∞ Ìö®Í≥º - Î°úÎ¥á, Ïô∏Í≥ÑÏù∏ Îì± 10Í∞ÄÏßÄ ÏùåÏÑ± Ìö®Í≥º',
      stock: 15,
      featured: true,
      tags: ['Ïã†Í∏∞Ïà†']
    },
    {
      id: 6,
      name: 'Î†àÏù∏Î≥¥Ïö∞ Ï±ÑÌåÖ Î≤ÑÎ∏î',
      price: 15000,
      image: 'üí¨',
      category: 'chat',
      description: 'Î¨¥ÏßÄÍ∞úÏÉâÏúºÎ°ú Î≥ÄÌïòÎäî ÎèôÏ†Å Ï±ÑÌåÖ ÎßêÌíçÏÑ†',
      stock: 100,
      tags: ['Î≤†Ïä§Ìä∏ÏÖÄÎü¨']
    },
    {
      id: 7,
      name: 'ÌÖîÎ†àÌè¨Ìä∏ Ïù¥ÌéôÌä∏',
      price: 35000,
      image: '‚ö°',
      category: 'effect',
      description: 'Ïù¥Îèô Ïãú Î≤àÍ∞ú Ìö®Í≥ºÍ∞Ä ÎÇòÌÉÄÎÇòÎäî ÌäπÎ≥ÑÌïú ÌÖîÎ†àÌè¨Ìä∏ Ïù¥ÌéôÌä∏',
      stock: 8,
      featured: true,
      tags: ['ÌïúÏ†ïÌåê', 'ÌäπÎ≥Ñ Ìö®Í≥º']
    },
    {
      id: 8,
      name: 'Í∞ÄÏÉÅ Ìé´ Ïª¥Ìå®ÎãàÏñ∏',
      price: 28000,
      image: 'üêâ',
      category: 'companion',
      description: 'ÎÇòÎ•º Îî∞ÎùºÎã§ÎãàÎäî Í∑ÄÏó¨Ïö¥ ÎìúÎûòÍ≥§ Ìé´ (AI ÏÉÅÌò∏ÏûëÏö© Í∞ÄÎä•)',
      stock: 20,
      tags: ['AI', 'ÎèôÎ∞òÏûê']
    }
  ];

  // Í∏∞Î≥∏ Ïô∏Î∂Ä ÏáºÌïëÎ™∞ ÎßÅÌÅ¨
  const defaultExternalLinks = [
    {
      id: 1,
      name: 'Ïä§ÎßàÌä∏Ïä§ÌÜ†Ïñ¥',
      url: 'https://smartstore.naver.com',
      description: 'ÎÑ§Ïù¥Î≤Ñ Ïä§ÎßàÌä∏Ïä§ÌÜ†Ïñ¥ÏóêÏÑú Ïö¥ÏòÅÌïòÎäî Í∞úÏù∏ ÏáºÌïëÎ™∞',
      icon: 'üõçÔ∏è'
    },
    {
      id: 2,
      name: 'Ïù∏Ïä§ÌÉÄÍ∑∏Îû® ÏÉµ',
      url: 'https://www.instagram.com/shop',
      description: 'Ïù∏Ïä§ÌÉÄÍ∑∏Îû® ÏáºÌïë Í∏∞Îä•',
      icon: 'üì∏'
    },
    {
      id: 3,
      name: 'Ïø†Ìå° Ïä§ÌÜ†Ïñ¥',
      url: 'https://www.coupang.com',
      description: 'Ïø†Ìå° ÌååÌä∏ÎÑàÏä§ Ïä§ÌÜ†Ïñ¥',
      icon: 'üì¶'
    }
  ];

  useEffect(() => {
    if (isOpen) {
      initializeShopInfo();
      loadShopData();
    }
  }, [isOpen, userId, currentMap, roomData]);

  // ÏáºÌïëÎ™∞ Ï†ïÎ≥¥ Ï¥àÍ∏∞Ìôî
  const initializeShopInfo = () => {
    const mapData = currentMap || roomData;
    const ownerId = mapData?.creatorId || mapData?.creator?.id || mapData?.userId;
    const ownerName = mapData?.createdBy || mapData?.creator?.username || username;
    
    const isOwnShop = ownerId === userId;
    const canManage = isOwnShop || isAdmin;
    const paymentEnabled = paymentConfigService.canProcessPayments(ownerId);

    console.log('üè™ ÏáºÌïëÎ™∞ Ï†ïÎ≥¥ Ï¥àÍ∏∞Ìôî:', {
      mapData,
      ownerId,
      ownerName,
      currentUserId: userId,
      isOwnShop,
      canManage,
      paymentEnabled
    });

    setShopInfo({
      ownerId,
      ownerName,
      isOwnShop,
      canManage,
      paymentEnabled
    });
  };

  const loadShopData = async () => {
    setIsLoading(true);
    try {
      // ÏÉÅÌíà Îç∞Ïù¥ÌÑ∞ Î°úÎìú
      // ÏáºÌïëÎ™∞ ÏÜåÏú†ÏûêÏùò ÏÉÅÌíà Îç∞Ïù¥ÌÑ∞ Î°úÎìú
      const shopOwnerId = shopInfo.ownerId || userId;
      const savedProducts = localStorage.getItem(`products_${shopOwnerId}`);
      if (savedProducts) {
        setProducts(JSON.parse(savedProducts));
      } else {
        setProducts(sampleProducts);
        localStorage.setItem(`products_${shopOwnerId}`, JSON.stringify(sampleProducts));
      }
      
      // ÏÇ¨Ïö©ÏûêÎ≥Ñ Ïû•Î∞îÍµ¨Îãà Î≥µÏõê (Íµ¨Îß§ÏûêÏùò Ïû•Î∞îÍµ¨Îãà)
      const savedCart = localStorage.getItem(`cart_${userId}`);
      if (savedCart) {
        setCart(JSON.parse(savedCart));
      }
      
      // ÏáºÌïëÎ™∞ ÏÜåÏú†ÏûêÏùò Ïô∏Î∂Ä ÎßÅÌÅ¨ Î∂àÎü¨Ïò§Í∏∞
      const savedLinks = localStorage.getItem(`externalLinks_${shopOwnerId}`);
      if (savedLinks) {
        setExternalLinks(JSON.parse(savedLinks));
      } else {
        setExternalLinks(defaultExternalLinks);
        localStorage.setItem(`externalLinks_${shopOwnerId}`, JSON.stringify(defaultExternalLinks));
      }
    } catch (error) {
      console.error('ÏáºÌïëÎ™∞ Îç∞Ïù¥ÌÑ∞ Î°úÎìú Ïã§Ìå®:', error);
    } finally {
      setIsLoading(false);
    }
  };

  const addToCart = (product) => {
    const existingItem = cart.find(item => item.id === product.id);
    let newCart;
    if (existingItem) {
      newCart = cart.map(item => 
        item.id === product.id 
          ? { ...item, quantity: item.quantity + 1 }
          : item
      );
    } else {
      newCart = [...cart, { ...product, quantity: 1 }];
    }
    setCart(newCart);
    localStorage.setItem(`cart_${userId}`, JSON.stringify(newCart));
    
    // ÏÑ±Í≥µ ÏïåÎ¶º (ÌÜ†Ïä§Ìä∏ Î©îÏãúÏßÄ)
    const notification = document.createElement('div');
    notification.style.cssText = `
      position: fixed;
      top: 20px;
      right: 20px;
      background: linear-gradient(135deg, #4CAF50, #45a049);
      color: white;
      padding: 12px 20px;
      border-radius: 25px;
      z-index: 3000;
      font-weight: 600;
      box-shadow: 0 4px 15px rgba(76, 175, 80, 0.3);
      animation: slideInRight 0.3s ease-out;
    `;
    notification.textContent = `${product.name}Ïù¥(Í∞Ä) Ïû•Î∞îÍµ¨ÎãàÏóê Ï∂îÍ∞ÄÎêòÏóàÏäµÎãàÎã§!`;
    document.body.appendChild(notification);
    
    setTimeout(() => {
      notification.remove();
    }, 3000);
  };

  const removeFromCart = (productId) => {
    const newCart = cart.filter(item => item.id !== productId);
    setCart(newCart);
    localStorage.setItem(`cart_${userId}`, JSON.stringify(newCart));
  };

  const updateQuantity = (productId, newQuantity) => {
    if (newQuantity <= 0) {
      removeFromCart(productId);
    } else {
      const newCart = cart.map(item => 
        item.id === productId 
          ? { ...item, quantity: newQuantity }
          : item
      );
      setCart(newCart);
      localStorage.setItem(`cart_${userId}`, JSON.stringify(newCart));
    }
  };

  const getTotalPrice = () => {
    return cart.reduce((total, item) => total + (item.price * item.quantity), 0);
  };

  const handlePurchase = async () => {
    if (cart.length === 0) return;
    setShowPaymentModal(true);
  };

  // Î©ÄÌã∞ Í≤∞Ï†ú ÏÑ±Í≥µ Ï≤òÎ¶¨
  const handlePaymentSuccess = (result) => {
    const total = getTotalPrice();
    
    // Íµ¨Îß§Ìïú ÏïÑÏù¥ÌÖúÏùÑ "ÎÇ¥ ÏïÑÏù¥ÌÖú"Ïóê Ï∂îÍ∞Ä
    const purchasedItems = localStorage.getItem(`myItems_${userId}`) || '[]';
    const currentItems = JSON.parse(purchasedItems);
    const newItems = cart.map(item => ({
      id: `${Date.now()}_${item.id}`,
      name: item.name,
      category: item.category,
      image: item.image,
      purchaseDate: new Date().toISOString(),
      quantity: item.quantity,
      paymentId: result.paymentKey || result.impUid || result.orderId,
      transactionId: result.paymentKey || result.impUid || result.orderId,
      provider: result.provider
    }));
    localStorage.setItem(`myItems_${userId}`, JSON.stringify([...currentItems, ...newItems]));

    // Ï£ºÎ¨∏ Í∏∞Î°ù Ï∂îÍ∞Ä
    const newOrder = {
      id: result.paymentKey || result.impUid || result.orderId,
      date: new Date().toLocaleDateString(),
      amount: total,
      items: cart.length,
      status: 'completed',
      transactionId: result.paymentKey || result.impUid || result.orderId,
      provider: result.provider,
      processingFee: Math.floor(total * 0.025), // 2.5% ÏàòÏàòÎ£å
      netAmount: Math.floor(total * 0.975)
    };
    const currentOrders = JSON.parse(localStorage.getItem(`orders_${userId}`) || '[]');
    localStorage.setItem(`orders_${userId}`, JSON.stringify([...currentOrders, newOrder]));

    // Îß§Ï∂ú Îç∞Ïù¥ÌÑ∞ ÏóÖÎç∞Ïù¥Ìä∏
    setSalesData(prev => ({
      ...prev,
      totalSales: prev.totalSales + cart.length,
      totalRevenue: prev.totalRevenue + total,
      monthlyRevenue: prev.monthlyRevenue + total
    }));
    
    // Ïû•Î∞îÍµ¨Îãà ÎπÑÏö∞Í∏∞
    setCart([]);
    localStorage.setItem(`cart_${userId}`, '[]');
    
    // Î™®Îã¨ Îã´Í∏∞ Î∞è ÎÇ¥ ÏïÑÏù¥ÌÖú ÌÉ≠ÏúºÎ°ú Ïù¥Îèô
    setShowPaymentModal(false);
    setActiveTab('myitems');
    
    // ÏÑ±Í≥µ ÏïåÎ¶º
    showPaymentSuccessNotification(result);
  };

  // Î©ÄÌã∞ Í≤∞Ï†ú ÏóêÎü¨ Ï≤òÎ¶¨
  const handlePaymentError = (error) => {
    console.error('Í≤∞Ï†ú Ïã§Ìå®:', error);
    
    // ÏóêÎü¨ ÏïåÎ¶º
    const notification = document.createElement('div');
    notification.style.cssText = `
      position: fixed;
      top: 20px;
      right: 20px;
      background: linear-gradient(135deg, #dc2626, #b91c1c);
      color: white;
      padding: 12px 20px;
      border-radius: 25px;
      z-index: 3000;
      font-weight: 600;
      box-shadow: 0 4px 15px rgba(220, 38, 38, 0.3);
      animation: slideInRight 0.3s ease-out;
    `;
    notification.textContent = `Í≤∞Ï†ú Ïã§Ìå®: ${error}`;
    document.body.appendChild(notification);
    
    setTimeout(() => {
      notification.remove();
    }, 5000);
  };

  // Î©ÄÌã∞ Í≤∞Ï†ú Ï∑®ÏÜå Ï≤òÎ¶¨
  const handlePaymentCancel = () => {
    setShowPaymentModal(false);
  };

  // Í≤∞Ï†ú ÏÑ±Í≥µ ÏïåÎ¶º ÌëúÏãú
  const showPaymentSuccessNotification = (result) => {
    const providerName = {
      'toss': 'ÌÜ†Ïä§ÌéòÏù¥Î®ºÏ∏†',
      'portone': 'PortOne',
      'simulation_toss': 'ÌÜ†Ïä§ÌéòÏù¥Î®ºÏ∏† (ÏãúÎÆ¨Î†àÏù¥ÏÖò)',
      'simulation_portone': 'PortOne (ÏãúÎÆ¨Î†àÏù¥ÏÖò)'
    }[result.provider] || 'Í≤∞Ï†ú ÏãúÏä§ÌÖú';

    const notification = document.createElement('div');
    notification.style.cssText = `
      position: fixed;
      top: 50%;
      left: 50%;
      transform: translate(-50%, -50%);
      background: linear-gradient(135deg, #667eea, #764ba2);
      color: white;
      padding: 30px 40px;
      border-radius: 20px;
      z-index: 3000;
      font-weight: 600;
      text-align: center;
      box-shadow: 0 10px 30px rgba(0, 0, 0, 0.3);
      animation: bounceIn 0.5s ease-out;
      font-size: 18px;
      max-width: 400px;
    `;
    notification.innerHTML = `
      <div style="font-size: 48px; margin-bottom: 15px;">üéâ</div>
      <div>${providerName} Í≤∞Ï†úÍ∞Ä ÏôÑÎ£åÎêòÏóàÏäµÎãàÎã§!</div>
      <div style="font-size: 14px; margin-top: 10px; opacity: 0.9;">
        Í≤∞Ï†ú ID: ${result.paymentKey || result.impUid || result.orderId}
      </div>
      <div style="font-size: 14px; margin-top: 5px; opacity: 0.9;">
        Íµ¨Îß§Ìïú ÏïÑÏù¥ÌÖúÏùÄ 'ÎÇ¥ ÏïÑÏù¥ÌÖú'ÏóêÏÑú ÌôïÏù∏Ìï† Ïàò ÏûàÏäµÎãàÎã§.
      </div>
    `;
    document.body.appendChild(notification);
    
    setTimeout(() => {
      notification.remove();
    }, 5000);
  };

  const processPayment = async () => {
    const total = getTotalPrice();
    
    // Í≤∞Ï†ú Îç∞Ïù¥ÌÑ∞ Ïú†Ìö®ÏÑ± Í≤ÄÏÇ¨
    const validation = paymentService.validatePaymentData({
      ...paymentForm,
      amount: total
    });

    if (!validation.isValid) {
      alert(validation.errors.join('\n'));
      return;
    }

    setPaymentProgress({ step: 'processing', message: 'Í≤∞Ï†úÎ•º ÏßÑÌñâÌïòÍ≥† ÏûàÏäµÎãàÎã§...', paymentId: null, transactionId: null });
    setIsLoading(true);

    try {
      // 1Îã®Í≥Ñ: Í≤∞Ï†ú ÏöîÏ≤≠ ÏÉùÏÑ±
      const paymentData = {
        amount: total,
        orderId: `order_${userId}_${Date.now()}`,
        customerName: paymentForm.cardHolder,
        customerEmail: `${userId}@miniarea.com`,
        cardNumber: paymentForm.cardNumber,
        expiryDate: paymentForm.expiryDate,
        cvv: paymentForm.cvv,
        cardHolder: paymentForm.cardHolder
      };

      paymentService.log('info', 'Í≤∞Ï†ú ÏöîÏ≤≠ ÏãúÏûë', paymentData);
      
      const paymentRequest = await paymentService.createPaymentRequest(paymentData);
      
      if (!paymentRequest.success) {
        throw new Error(paymentRequest.message || 'Í≤∞Ï†ú ÏöîÏ≤≠ ÏÉùÏÑ± Ïã§Ìå®');
      }

      setPaymentProgress({ 
        step: 'processing', 
        message: 'Í≤∞Ï†ú ÏäπÏù∏ÏùÑ Ï≤òÎ¶¨ÌïòÍ≥† ÏûàÏäµÎãàÎã§...', 
        paymentId: paymentRequest.payment_id,
        transactionId: null 
      });

      // 2Îã®Í≥Ñ: Í≤∞Ï†ú ÏäπÏù∏ Ï≤òÎ¶¨
      const confirmationData = {
        amount: total,
        order_items: cart.map(item => ({
          id: item.id,
          name: item.name,
          quantity: item.quantity,
          price: item.price
        }))
      };

      const paymentResult = await paymentService.processPayment(paymentRequest.payment_id, confirmationData);

      if (!paymentResult.success) {
        throw new Error(paymentResult.message || 'Í≤∞Ï†ú Ï≤òÎ¶¨ Ïã§Ìå®');
      }

      // 3Îã®Í≥Ñ: Í≤∞Ï†ú ÏÑ±Í≥µ Ï≤òÎ¶¨
      paymentService.log('info', 'Í≤∞Ï†ú ÏôÑÎ£å', paymentResult);

      setPaymentProgress({ 
        step: 'success', 
        message: 'Í≤∞Ï†úÍ∞Ä ÏÑ±Í≥µÏ†ÅÏúºÎ°ú ÏôÑÎ£åÎêòÏóàÏäµÎãàÎã§!', 
        paymentId: paymentResult.payment_id,
        transactionId: paymentResult.transaction_id 
      });

      // Íµ¨Îß§Ìïú ÏïÑÏù¥ÌÖúÏùÑ "ÎÇ¥ ÏïÑÏù¥ÌÖú"Ïóê Ï∂îÍ∞Ä
      await handlePurchaseSuccess(paymentResult);

    } catch (error) {
      paymentService.log('error', 'Í≤∞Ï†ú Ïã§Ìå®', error.message);
      
      setPaymentProgress({ 
        step: 'error', 
        message: error.message || 'Í≤∞Ï†ú Ï§ë Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§.', 
        paymentId: null,
        transactionId: null 
      });
    } finally {
      setIsLoading(false);
    }
  };

  // Í≤∞Ï†ú ÏÑ±Í≥µ ÌõÑ Ï≤òÎ¶¨
  const handlePurchaseSuccess = async (paymentResult) => {
    const total = getTotalPrice();
    
    // Íµ¨Îß§Ìïú ÏïÑÏù¥ÌÖúÏùÑ "ÎÇ¥ ÏïÑÏù¥ÌÖú"Ïóê Ï∂îÍ∞Ä
    const purchasedItems = localStorage.getItem(`myItems_${userId}`) || '[]';
    const currentItems = JSON.parse(purchasedItems);
    const newItems = cart.map(item => ({
      id: `${Date.now()}_${item.id}`,
      name: item.name,
      category: item.category,
      image: item.image,
      purchaseDate: new Date().toISOString(),
      quantity: item.quantity,
      paymentId: paymentResult.payment_id,
      transactionId: paymentResult.transaction_id
    }));
    localStorage.setItem(`myItems_${userId}`, JSON.stringify([...currentItems, ...newItems]));

    // Ï£ºÎ¨∏ Í∏∞Î°ù Ï∂îÍ∞Ä
    const newOrder = {
      id: paymentResult.payment_id,
      date: new Date().toLocaleDateString(),
      amount: total,
      items: cart.length,
      status: 'completed',
      transactionId: paymentResult.transaction_id,
      processingFee: paymentResult.processing_fee || 0,
      netAmount: paymentResult.net_amount || total
    };
    const currentOrders = JSON.parse(localStorage.getItem(`orders_${userId}`) || '[]');
    localStorage.setItem(`orders_${userId}`, JSON.stringify([...currentOrders, newOrder]));

    // Îß§Ï∂ú Îç∞Ïù¥ÌÑ∞ ÏóÖÎç∞Ïù¥Ìä∏
    setSalesData(prev => ({
      ...prev,
      totalSales: prev.totalSales + cart.length,
      totalRevenue: prev.totalRevenue + total,
      monthlyRevenue: prev.monthlyRevenue + total
    }));
    
    // Í≤∞Ï†ú Ìèº Ï¥àÍ∏∞Ìôî
    setPaymentForm({
      cardNumber: '',
      expiryDate: '',
      cvv: '',
      cardHolder: '',
      bankAccount: '',
      bankName: '',
      accountHolder: '',
      walletAddress: '',
      walletType: 'bitcoin'
    });
    
    // Ïû•Î∞îÍµ¨Îãà ÎπÑÏö∞Í∏∞
    setCart([]);
    localStorage.setItem(`cart_${userId}`, '[]');
    
    // 3Ï¥à ÌõÑ Î™®Îã¨ Îã´Í∏∞ Î∞è ÎÇ¥ ÏïÑÏù¥ÌÖú ÌÉ≠ÏúºÎ°ú Ïù¥Îèô
    setTimeout(() => {
      setShowPaymentModal(false);
      setPaymentProgress({ step: 'form', message: '', paymentId: null, transactionId: null });
      setActiveTab('myitems');
      
      // ÏÑ±Í≥µ ÏïåÎ¶º
      showSuccessNotification(paymentResult);
    }, 3000);
  };

  // ÏÑ±Í≥µ ÏïåÎ¶º ÌëúÏãú
  const showSuccessNotification = (paymentResult) => {
    const notification = document.createElement('div');
    notification.style.cssText = `
      position: fixed;
      top: 50%;
      left: 50%;
      transform: translate(-50%, -50%);
      background: linear-gradient(135deg, #667eea, #764ba2);
      color: white;
      padding: 30px 40px;
      border-radius: 20px;
      z-index: 3000;
      font-weight: 600;
      text-align: center;
      box-shadow: 0 10px 30px rgba(0, 0, 0, 0.3);
      animation: bounceIn 0.5s ease-out;
      font-size: 18px;
      max-width: 400px;
    `;
    notification.innerHTML = `
      <div style="font-size: 48px; margin-bottom: 15px;">üéâ</div>
      <div>Íµ¨Îß§Í∞Ä ÏôÑÎ£åÎêòÏóàÏäµÎãàÎã§!</div>
      <div style="font-size: 14px; margin-top: 10px; opacity: 0.9;">
        Í±∞ÎûòÎ≤àÌò∏: ${paymentResult.transaction_id}
      </div>
      <div style="font-size: 14px; margin-top: 5px; opacity: 0.9;">
        Íµ¨Îß§Ìïú ÏïÑÏù¥ÌÖúÏùÄ 'ÎÇ¥ ÏïÑÏù¥ÌÖú'ÏóêÏÑú ÌôïÏù∏Ìï† Ïàò ÏûàÏäµÎãàÎã§.
      </div>
    `;
    document.body.appendChild(notification);
    
    setTimeout(() => {
      notification.remove();
    }, 5000);
  };

  // Í≤∞Ï†ú Ïû¨ÏãúÎèÑ
  const retryPayment = () => {
    setPaymentProgress({ step: 'form', message: '', paymentId: null, transactionId: null });
  };

  // Í≤∞Ï†ú Ï∑®ÏÜå
  const cancelPayment = async () => {
    if (paymentProgress.paymentId) {
      try {
        await paymentService.cancelPayment(paymentProgress.paymentId, 'ÏÇ¨Ïö©Ïûê Ï∑®ÏÜå');
      } catch (error) {
        console.error('Í≤∞Ï†ú Ï∑®ÏÜå Ïã§Ìå®:', error);
      }
    }
    
    setShowPaymentModal(false);
    setPaymentProgress({ step: 'form', message: '', paymentId: null, transactionId: null });
  };

  // Ïô∏Î∂Ä ÎßÅÌÅ¨ Í¥ÄÎ¶¨ Ìï®ÏàòÎì§
  const saveExternalLinks = (links) => {
    localStorage.setItem(`externalLinks_${userId}`, JSON.stringify(links));
    setExternalLinks(links);
  };

  const addExternalLink = () => {
    if (!newLink.name || !newLink.url) {
      alert('ÏáºÌïëÎ™∞ Ïù¥Î¶ÑÍ≥º URLÏùÑ ÏûÖÎ†•Ìï¥Ï£ºÏÑ∏Ïöî.');
      return;
    }

    // URL ÌòïÏãù Í≤ÄÏ¶ù
    try {
      new URL(newLink.url.startsWith('http') ? newLink.url : `https://${newLink.url}`);
    } catch {
      alert('Ïò¨Î∞îÎ•∏ URL ÌòïÏãùÏù¥ ÏïÑÎãôÎãàÎã§.');
      return;
    }

    const updatedLinks = [...externalLinks, {
      ...newLink,
      id: Date.now(),
      url: newLink.url.startsWith('http') ? newLink.url : `https://${newLink.url}`,
      icon: 'üîó'
    }];
    
    saveExternalLinks(updatedLinks);
    setNewLink({ name: '', url: '', description: '' });
  };

  const removeExternalLink = (linkId) => {
    const updatedLinks = externalLinks.filter(link => link.id !== linkId);
    saveExternalLinks(updatedLinks);
  };

  const openExternalLink = (url) => {
    window.open(url, '_blank', 'noopener,noreferrer');
  };

  // Ïù¥Î™®ÏßÄ ÏÑ†ÌÉùÍ∏∞ ÏÉÅÌÉú
  const [showEmojiPicker, setShowEmojiPicker] = useState(false);

  // Í≤∞Ï†ú Í¥ÄÎ†® ÏÉÅÌÉú
  const [showPaymentModal, setShowPaymentModal] = useState(false);
  const [selectedPaymentMethod, setSelectedPaymentMethod] = useState('credit-card');
  const [paymentForm, setPaymentForm] = useState({
    cardNumber: '',
    expiryDate: '',
    cvv: '',
    cardHolder: '',
    bankAccount: '',
    bankName: '',
    accountHolder: '',
    walletAddress: '',
    walletType: 'bitcoin'
  });
  const [paymentProgress, setPaymentProgress] = useState({
    step: 'form', // 'form', 'processing', 'success', 'error'
    message: '',
    paymentId: null,
    transactionId: null
  });

  // Ïù¥Î™®ÏßÄ Î™©Î°ù
  const emojiCategories = {
    'avatar': ['‚ú®', 'üë§', 'üíé', 'üåü', 'üëë', 'üí´', 'üé≠', 'ü¶Ñ'],
    'emoticon': ['ü§ñ', 'üòé', 'ü•≥', 'üòç', 'ü§©', 'üòä', 'üòÑ', 'ü§ó'],
    'space': ['üè∞', 'üåç', 'üåé', 'üåè', 'üèùÔ∏è', 'üóª', '‚õ©Ô∏è', 'üé™'],
    'effect': ['üí´', '‚ö°', 'üåà', '‚ú®', 'üí•', 'üî•', '‚ùÑÔ∏è', 'üíß'],
    'voice': ['üéôÔ∏è', 'üéµ', 'üé∂', 'üì¢', 'üìª', 'üîä', 'üîâ', 'üîà'],
    'chat': ['üí¨', 'üí≠', 'üíå', 'üìù', 'üì®', 'üíù', 'üéâ', 'üéä'],
    'companion': ['üêâ', 'ü¶ã', 'üêæ', 'ü¶ä', 'üê∫', 'üê∏', 'üå∏', 'üå∫']
  };

  // ÏÑ†ÌÉùÌïú Ïπ¥ÌÖåÍ≥†Î¶¨Ïùò Ïù¥Î™®ÏßÄ Í∞ÄÏ†∏Ïò§Í∏∞
  const getCurrentEmojis = () => {
    const category = editingProduct === 'new' ? newProduct.category : editingProduct.category;
    return emojiCategories[category] || emojiCategories['avatar'];
  };

  // Ïù¥Î™®ÏßÄ ÏÑ†ÌÉù Ï≤òÎ¶¨
  const selectEmoji = (emoji) => {
    updateProductField('image', emoji);
    setShowEmojiPicker(false);
  };

  // Í≤∞Ï†ú Ìèº ÏóÖÎç∞Ïù¥Ìä∏
  const updatePaymentForm = (field, value) => {
    setPaymentForm(prev => ({ ...prev, [field]: value }));
  };

  // Ïπ¥Îìú Î≤àÌò∏ Ìè¨Îß∑ÌåÖ
  const formatCardNumber = (value) => {
    const v = value.replace(/\s+/g, '').replace(/[^0-9]/gi, '');
    const matches = v.match(/\d{4,16}/g);
    const match = matches && matches[0] || '';
    const parts = [];
    for (let i = 0, len = match.length; i < len; i += 4) {
      parts.push(match.substring(i, i + 4));
    }
    if (parts.length) {
      return parts.join(' ');
    } else {
      return v;
    }
  };

  // Ïú†Ìö®Í∏∞Í∞Ñ Ìè¨Îß∑ÌåÖ
  const formatExpiryDate = (value) => {
    const v = value.replace(/\D+/g, '');
    const matches = v.match(/(\d{0,2})(\d{0,2})/);
    if (!matches) return '';
    return [matches[1], matches[2]].filter(x => x).join('/');
  };

  // Í¥ÄÎ¶¨Ïûê Ìï®ÏàòÎì§
  const handleAdminLogin = () => {
    if (adminPassword === 'admin123') {
      setIsAdmin(true);
      setAdminPassword('');
      
      // Ï£ºÎ¨∏ Îç∞Ïù¥ÌÑ∞ Î°úÎìú
      const savedOrders = localStorage.getItem(`orders_${userId}`) || '[]';
      setOrders(JSON.parse(savedOrders));
    } else {
      alert('ÏûòÎ™ªÎêú ÎπÑÎ∞ÄÎ≤àÌò∏ÏûÖÎãàÎã§.');
      setAdminPassword('');
    }
  };

  const updateProductStock = (productId, newStock) => {
    const updatedProducts = products.map(product =>
      product.id === productId ? { ...product, stock: newStock } : product
    );
    setProducts(updatedProducts);
    localStorage.setItem(`products_${userId}`, JSON.stringify(updatedProducts));
  };

  const deleteProduct = (productId) => {
    if (window.confirm('Ï†ïÎßê Ïù¥ ÏÉÅÌíàÏùÑ ÏÇ≠Ï†úÌïòÏãúÍ≤†ÏäµÎãàÍπå?')) {
      const updatedProducts = products.filter(product => product.id !== productId);
      setProducts(updatedProducts);
      localStorage.setItem(`products_${userId}`, JSON.stringify(updatedProducts));
    }
  };

  const updateProductField = (field, value) => {
    if (editingProduct === 'new') {
      setNewProduct({ ...newProduct, [field]: value });
    } else {
      setEditingProduct({ ...editingProduct, [field]: value });
    }
  };

  const saveProduct = () => {
    if (editingProduct === 'new') {
      if (!newProduct.name || !newProduct.price || !newProduct.description) {
        alert('ÌïÑÏàò Ï†ïÎ≥¥Î•º Î™®Îëê ÏûÖÎ†•Ìï¥Ï£ºÏÑ∏Ïöî.');
        return;
      }
      
      const product = {
        ...newProduct,
        id: Date.now(),
        price: parseInt(newProduct.price) || 0,
        stock: parseInt(newProduct.stock) || 0,
        featured: false,
        tags: ['Ïã†ÏÉÅÌíà']
      };
      
      const updatedProducts = [...products, product];
      setProducts(updatedProducts);
      localStorage.setItem(`products_${userId}`, JSON.stringify(updatedProducts));
      setNewProduct({
        name: '',
        price: '',
        image: '',
        category: 'avatar',
        description: '',
        stock: '',
        tags: []
      });
    } else {
      const updatedProducts = products.map(product =>
        product.id === editingProduct.id ? editingProduct : product
      );
      setProducts(updatedProducts);
      localStorage.setItem(`products_${userId}`, JSON.stringify(updatedProducts));
    }
    
    setEditingProduct(null);
  };

  const updateOrderStatus = (orderId, newStatus) => {
    const updatedOrders = orders.map(order =>
      order.id === orderId ? { ...order, status: newStatus } : order
    );
    setOrders(updatedOrders);
    localStorage.setItem(`orders_${userId}`, JSON.stringify(updatedOrders));
  };

  const filteredProducts = products.filter(product =>
    product.name.toLowerCase().includes(searchTerm.toLowerCase()) ||
    product.description.toLowerCase().includes(searchTerm.toLowerCase())
  );

  if (!isOpen) return null;

  return (
    <div className="personal-shop-overlay">
      <div className="personal-shop-modal">
        {/* Ìó§Îçî */}
        <div className="shop-header">
          <div className="shop-title">
            <h2>üõçÔ∏è {shopInfo.ownerName || username}Ïùò Í∞úÏù∏ ÏáºÌïëÎ™∞</h2>
            <p>ÏïÑÎ∞îÌÉÄ Ïª§Ïä§ÌÑ∞ÎßàÏù¥Ïßï & ÎîîÏßÄÌÑ∏ ÏïÑÏù¥ÌÖú</p>
            {!shopInfo.isOwnShop && (
              <div className="visitor-badge">
                üë• Î∞©Î¨∏ Ï§ë ‚Ä¢ Ïö¥ÏòÅÏûê: {shopInfo.ownerName}
              </div>
            )}
            {shopInfo.paymentEnabled ? (
              <div className="payment-status enabled">
                ‚úÖ Í≤∞Ï†ú ÏãúÏä§ÌÖú ÌôúÏÑ±Ìôî
              </div>
            ) : (
              <div className="payment-status disabled">
                ‚ö†Ô∏è Í≤∞Ï†ú ÏãúÏä§ÌÖú ÎØ∏ÏÑ§Ï†ï
              </div>
            )}
          </div>
          <button className="close-btn" onClick={onClose}>‚úï</button>
        </div>

        {/* ÌÉ≠ ÎÑ§ÎπÑÍ≤åÏù¥ÏÖò */}
        <div className="shop-tabs">
          <button 
            className={`tab ${activeTab === 'products' ? 'active' : ''}`}
            onClick={() => setActiveTab('products')}
          >
            üõí ÏÉÅÌíà ({filteredProducts.length})
          </button>
          <button 
            className={`tab ${activeTab === 'external' ? 'active' : ''}`}
            onClick={() => setActiveTab('external')}
          >
            üîó Ïô∏Î∂ÄÏáºÌïëÎ™∞ ({externalLinks.length})
          </button>
          <button 
            className={`tab ${activeTab === 'cart' ? 'active' : ''}`}
            onClick={() => setActiveTab('cart')}
          >
            üõçÔ∏è Ïû•Î∞îÍµ¨Îãà ({cart.length})
          </button>
          <button 
            className={`tab ${activeTab === 'myitems' ? 'active' : ''}`}
            onClick={() => setActiveTab('myitems')}
          >
            üíé ÎÇ¥ ÏïÑÏù¥ÌÖú
          </button>
          <button 
            className={`tab ${activeTab === 'settings' ? 'active' : ''}`}
            onClick={() => setActiveTab('settings')}
          >
            ‚öôÔ∏è ÏÑ§Ï†ï
          </button>
          <button 
            className={`tab ${activeTab === 'admin' ? 'active' : ''}`}
            onClick={() => setActiveTab('admin')}
            style={{ display: isAdmin ? 'block' : 'none' }}
          >
            üîß Í¥ÄÎ¶¨Ïûê
          </button>
        </div>

        {/* Ïª®ÌÖêÏ∏† ÏòÅÏó≠ */}
        <div className="shop-content">
          {activeTab === 'products' && (
            <div className="products-tab">
              {/* Í≤ÄÏÉâ Î∞î */}
              <div className="search-bar">
                <input
                  type="text"
                  placeholder="ÏÉÅÌíà Í≤ÄÏÉâ..."
                  value={searchTerm}
                  onChange={(e) => setSearchTerm(e.target.value)}
                />
                <button>üîç</button>
              </div>

              {/* ÏÉÅÌíà Í∑∏Î¶¨Îìú */}
              <div className="products-grid">
                {filteredProducts.map(product => (
                  <div key={product.id} className="product-card">
                    <div className="product-image">{product.image}</div>
                    <div className="product-info">
                      <h3>{product.name}</h3>
                      <p className="product-description">{product.description}</p>
                      <div className="product-details">
                        <span className="price">{product.price.toLocaleString()}Ïõê</span>
                        <span className="stock">Ïû¨Í≥†: {product.stock}Í∞ú</span>
                      </div>
                      <button 
                        className="add-to-cart-btn"
                        onClick={() => addToCart(product)}
                        disabled={product.stock === 0}
                      >
                        {product.stock === 0 ? 'ÌíàÏ†à' : 'Ïû•Î∞îÍµ¨Îãà Îã¥Í∏∞'}
                      </button>
                    </div>
                  </div>
                ))}
              </div>
            </div>
          )}

          {activeTab === 'cart' && (
            <div className="cart-tab">
              {cart.length === 0 ? (
                <div className="empty-cart">
                  <p>üõçÔ∏è Ïû•Î∞îÍµ¨ÎãàÍ∞Ä ÎπÑÏñ¥ÏûàÏäµÎãàÎã§</p>
                  <button onClick={() => setActiveTab('products')}>
                    ÏÉÅÌíà Î≥¥Îü¨Í∞ÄÍ∏∞
                  </button>
                </div>
              ) : (
                <>
                  <div className="cart-items">
                    {cart.map(item => (
                      <div key={item.id} className="cart-item">
                        <div className="item-image">{item.image}</div>
                        <div className="item-details">
                          <h4>{item.name}</h4>
                          <p>{item.price.toLocaleString()}Ïõê</p>
                        </div>
                        <div className="quantity-controls">
                          <button onClick={() => updateQuantity(item.id, item.quantity - 1)}>-</button>
                          <span>{item.quantity}</span>
                          <button onClick={() => updateQuantity(item.id, item.quantity + 1)}>+</button>
                        </div>
                        <div className="item-total">
                          {(item.price * item.quantity).toLocaleString()}Ïõê
                        </div>
                        <button 
                          className="remove-btn"
                          onClick={() => removeFromCart(item.id)}
                        >
                          üóëÔ∏è
                        </button>
                      </div>
                    ))}
                  </div>
                  
                  <div className="cart-summary">
                    <div className="total-price">
                      Ï¥ù Í∏àÏï°: {getTotalPrice().toLocaleString()}Ïõê
                    </div>
                    <button 
                      className="purchase-btn"
                      onClick={handlePurchase}
                      disabled={isLoading}
                    >
                      {isLoading ? 'Í≤∞Ï†ú Ï§ë...' : 'Íµ¨Îß§ÌïòÍ∏∞'}
                    </button>
                  </div>
                </>
              )}
            </div>
          )}

          {activeTab === 'external' && (
            <div className="external-tab">
              <div className="external-header">
                <h3>üîó Ïô∏Î∂Ä ÏáºÌïëÎ™∞ Î∞îÎ°úÍ∞ÄÍ∏∞</h3>
                <p>ÎÇ¥Í∞Ä Ïö¥ÏòÅÌïòÎäî Îã§Î•∏ ÏáºÌïëÎ™∞Îì§ÏùÑ Îì±Î°ùÌïòÍ≥† Î∞©Î¨∏ÏûêÎì§Ïù¥ ÏâΩÍ≤å Ï†ëÍ∑ºÌï† Ïàò ÏûàÎèÑÎ°ù Ìï¥Î≥¥ÏÑ∏Ïöî!</p>
              </div>

              {/* Ïô∏Î∂Ä ÎßÅÌÅ¨ Î™©Î°ù */}
              <div className="external-links-grid">
                {externalLinks.map(link => (
                  <div key={link.id} className="external-link-card">
                    <div className="link-header">
                      <span className="link-icon">{link.icon}</span>
                      <h4>{link.name}</h4>
                      <button 
                        className="remove-link-btn"
                        onClick={() => removeExternalLink(link.id)}
                        title="ÏÇ≠Ï†ú"
                      >
                        ‚úï
                      </button>
                    </div>
                    <p className="link-description">{link.description}</p>
                    <div className="link-url">{link.url}</div>
                    <button 
                      className="visit-link-btn"
                      onClick={() => openExternalLink(link.url)}
                    >
                      üöÄ Î∞©Î¨∏ÌïòÍ∏∞
                    </button>
                  </div>
                ))}
              </div>

              {/* ÏÉà ÎßÅÌÅ¨ Ï∂îÍ∞Ä */}
              <div className="add-link-section">
                <h4>ÏÉà ÏáºÌïëÎ™∞ Ï∂îÍ∞Ä</h4>
                <div className="add-link-form">
                  <input
                    type="text"
                    placeholder="ÏáºÌïëÎ™∞ Ïù¥Î¶Ñ (Ïòà: ÎÇ¥ ÎÑ§Ïù¥Î≤Ñ Ïä§ÎßàÌä∏Ïä§ÌÜ†Ïñ¥)"
                    value={newLink.name}
                    onChange={(e) => setNewLink({...newLink, name: e.target.value})}
                  />
                  <input
                    type="url"
                    placeholder="URL (Ïòà: https://smartstore.naver.com/mystore)"
                    value={newLink.url}
                    onChange={(e) => setNewLink({...newLink, url: e.target.value})}
                  />
                  <textarea
                    placeholder="ÏÑ§Î™Ö (ÏÑ†ÌÉùÏÇ¨Ìï≠)"
                    value={newLink.description}
                    onChange={(e) => setNewLink({...newLink, description: e.target.value})}
                    rows="2"
                  />
                  <button className="add-link-btn" onClick={addExternalLink}>
                    ‚ûï ÏáºÌïëÎ™∞ Ï∂îÍ∞Ä
                  </button>
                </div>
              </div>
            </div>
          )}

          {activeTab === 'myitems' && (
            <div className="myitems-tab">
              {(() => {
                const myItems = JSON.parse(localStorage.getItem(`myItems_${userId}`) || '[]');
                const groupedItems = myItems.reduce((acc, item) => {
                  if (!acc[item.category]) acc[item.category] = [];
                  acc[item.category].push(item);
                  return acc;
                }, {});

                const categoryIcons = {
                  avatar: '‚ú®',
                  emoticon: 'üòé',
                  space: 'üè∞', 
                  effect: 'üí´',
                  voice: 'üéôÔ∏è',
                  chat: 'üí¨',
                  companion: 'üêâ'
                };

                const categoryNames = {
                  avatar: 'ÏïÑÎ∞îÌÉÄ Ïä§ÌÇ®',
                  emoticon: 'Ïù¥Î™®Ìã∞ÏΩò',
                  space: 'Í∞ÄÏÉÅ Í≥µÍ∞Ñ',
                  effect: 'ÌäπÏàò Ìö®Í≥º',
                  voice: 'ÏùåÏÑ± Ìö®Í≥º',
                  chat: 'Ï±ÑÌåÖ Ìö®Í≥º',
                  companion: 'Ïª¥Ìå®ÎãàÏñ∏'
                };

                return (
                  <div className="my-items-grid">
                    {Object.keys(groupedItems).length === 0 ? (
                      <div className="no-items">
                        <div style={{ fontSize: '48px', marginBottom: '20px' }}>üì¶</div>
                        <h3>ÏïÑÏßÅ Íµ¨Îß§Ìïú ÏïÑÏù¥ÌÖúÏù¥ ÏóÜÏäµÎãàÎã§</h3>
                        <p>ÏÉÅÌíàÏùÑ Íµ¨Îß§ÌïòÎ©¥ Ïó¨Í∏∞ÏóêÏÑú ÌôïÏù∏Ìï† Ïàò ÏûàÏäµÎãàÎã§.</p>
                        <button 
                          onClick={() => setActiveTab('products')}
                          style={{
                            padding: '12px 24px',
                            background: 'linear-gradient(135deg, #667eea, #764ba2)',
                            color: 'white',
                            border: 'none',
                            borderRadius: '25px',
                            cursor: 'pointer',
                            fontWeight: '600',
                            marginTop: '15px'
                          }}
                        >
                          ÏÉÅÌíà Î≥¥Îü¨Í∞ÄÍ∏∞
                        </button>
                      </div>
                    ) : (
                      Object.entries(groupedItems).map(([category, items]) => (
                        <div key={category} className="item-category">
                          <h3>
                            {categoryIcons[category] || 'üéÅ'} {categoryNames[category] || category}
                            <span className="item-count">({items.length}Í∞ú)</span>
                          </h3>
                          <div className="items-list">
                            {items.map((item, index) => (
                              <div key={`${item.id}_${index}`} className="owned-item">
                                <div className="item-icon">{item.image}</div>
                                <div className="item-info">
                                  <div className="item-name">{item.name}</div>
                                  <div className="item-date">
                                    {new Date(item.purchaseDate).toLocaleDateString()}
                                  </div>
                                  {item.quantity > 1 && (
                                    <div className="item-quantity">x{item.quantity}</div>
                                  )}
                                </div>
                              </div>
                            ))}
                          </div>
                        </div>
                      ))
                    )}
                  </div>
                );
              })()}
            </div>
          )}

          {activeTab === 'settings' && (
            <div className="settings-tab">
              <div className="settings-section">
                <h3>‚öôÔ∏è ÏáºÌïëÎ™∞ ÏÑ§Ï†ï</h3>
                
                <div className="setting-group">
                  <h4>üîó Ïô∏Î∂Ä ÏáºÌïëÎ™∞ Î∞îÎ°úÍ∞ÄÍ∏∞</h4>
                  <p>Î©îÏù∏ ÏáºÌïëÎ™∞ ÌÉ≠ÏóêÏÑú Ïô∏Î∂Ä ÏáºÌïëÎ™∞ÏùÑ Í¥ÄÎ¶¨Ìï† Ïàò ÏûàÏäµÎãàÎã§.</p>
                  <button 
                    className="setting-btn"
                    onClick={() => setActiveTab('external')}
                  >
                    Ïô∏Î∂Ä ÏáºÌïëÎ™∞ Í¥ÄÎ¶¨ÌïòÍ∏∞
                  </button>
                </div>

                {/* Î©ÄÌã∞ Í≤∞Ï†ú ÏÑ§Ï†ï */}
                {shopInfo.isOwnShop && (
                  <MultiPaymentSettingsSection 
                    shopOwnerId={shopInfo.ownerId}
                    onConfigUpdate={() => {
                      initializeShopInfo(); // ÏÑ§Ï†ï ÏóÖÎç∞Ïù¥Ìä∏ ÌõÑ ÏáºÌïëÎ™∞ Ï†ïÎ≥¥ ÏÉàÎ°úÍ≥†Ïπ®
                    }}
                  />
                )}

                <div className="setting-group">
                  <h4>üí≥ Í≤∞Ï†ú ÏãúÏä§ÌÖú ÏÉÅÌÉú</h4>
                  <div className="payment-status-detail">
                    {shopInfo.paymentEnabled ? (
                      <div className="status-enabled">
                        <span className="status-icon">‚úÖ</span>
                        <span>Í≤∞Ï†ú ÏãúÏä§ÌÖúÏù¥ ÌôúÏÑ±ÌôîÎêòÏñ¥ ÏûàÏäµÎãàÎã§.</span>
                      </div>
                    ) : (
                      <div className="status-disabled">
                        <span className="status-icon">‚ö†Ô∏è</span>
                        <span>Í≤∞Ï†ú ÏãúÏä§ÌÖúÏù¥ ÏÑ§Ï†ïÎêòÏßÄ ÏïäÏïòÏäµÎãàÎã§.</span>
                      </div>
                    )}
                  </div>
                </div>

                <div className="setting-group">
                  <h4>üì¶ Î∞∞ÏÜ° ÏÑ§Ï†ï</h4>
                  <div className="shipping-settings">
                    <label>
                      Í∏∞Î≥∏ Î∞∞ÏÜ°ÎπÑ:
                      <input type="number" defaultValue="3000" /> Ïõê
                    </label>
                    <label>
                      Î¨¥Î£åÎ∞∞ÏÜ° Í∏∞Ï§Ä:
                      <input type="number" defaultValue="50000" /> Ïõê Ïù¥ÏÉÅ
                    </label>
                  </div>
                </div>

                <div className="setting-group">
                  <h4>üé® ÏáºÌïëÎ™∞ ÌÖåÎßà</h4>
                  <div className="theme-options">
                    <button className="theme-btn active">üåü Í∏∞Î≥∏ ÌÖåÎßà</button>
                    <button className="theme-btn">üåô Îã§ÌÅ¨ ÌÖåÎßà</button>
                    <button className="theme-btn">üå∏ ÌïëÌÅ¨ ÌÖåÎßà</button>
                    <button className="theme-btn">üåä Î∏îÎ£® ÌÖåÎßà</button>
                  </div>
                </div>

                <div className="setting-group">
                  <h4>üìä ÌÜµÍ≥Ñ Î∞è Î∂ÑÏÑù</h4>
                  <div className="stats-info">
                    <div className="stat-item">
                      <span>Ïò§Îäò Î∞©Î¨∏Ïûê</span>
                      <strong>24Î™Ö</strong>
                    </div>
                    <div className="stat-item">
                      <span>Ï¥ù ÌåêÎß§Îüâ</span>
                      <strong>156Í∞ú</strong>
                    </div>
                    <div className="stat-item">
                      <span>Ï¥ù Îß§Ï∂ú</span>
                      <strong>2,340,000Ïõê</strong>
                    </div>
                  </div>
                </div>

                <div className="setting-group">
                  <h4>üì¢ ÎßàÏºÄÌåÖ ÏÑ§Ï†ï</h4>
                  <label>
                    <input type="checkbox" defaultChecked />
                    Ïã†ÏÉÅÌíà ÏïåÎ¶º ÌóàÏö©
                  </label>
                  <label>
                    <input type="checkbox" />
                    Ìï†Ïù∏ Ï†ïÎ≥¥ Ïù¥Î©îÏùº Î∞úÏÜ°
                  </label>
                  <label>
                    <input type="checkbox" />
                    SNS ÏûêÎèô ÌôçÎ≥¥
                  </label>
                </div>

                <div className="setting-group">
                  <h4>üîß Í¥ÄÎ¶¨Ïûê ÎèÑÍµ¨</h4>
                  <p>ÏÉÅÌíà, Ï£ºÎ¨∏, Îß§Ï∂ú Îì±ÏùÑ Í¥ÄÎ¶¨Ìï† Ïàò ÏûàÎäî Í¥ÄÎ¶¨Ïûê Ìå®ÎÑêÏóê Ï†ëÍ∑ºÌïòÏÑ∏Ïöî.</p>
                  <button 
                    className="setting-btn admin-access-btn"
                    onClick={() => setActiveTab('admin')}
                    style={{
                      background: 'linear-gradient(135deg, #dc2626, #b91c1c)',
                      color: 'white'
                    }}
                  >
                    üîß Í¥ÄÎ¶¨Ïûê Ìå®ÎÑê Ï†ëÍ∑º
                  </button>
                </div>
              </div>
            </div>
          )}

          {activeTab === 'admin' && isAdmin && (
            <div className="admin-tab">
              <div className="admin-header">
                <h3>üîß Í¥ÄÎ¶¨Ïûê Ìå®ÎÑê</h3>
                <button 
                  className="logout-admin-btn"
                  onClick={() => {
                    setIsAdmin(false);
                    setActiveTab('products');
                    setAdminPassword('');
                  }}
                >
                  Î°úÍ∑∏ÏïÑÏõÉ
                </button>
              </div>

              <div className="admin-sections">
                {/* ÏÉÅÌíà Í¥ÄÎ¶¨ */}
                <div className="admin-section">
                  <h4>üì¶ ÏÉÅÌíà Í¥ÄÎ¶¨</h4>
                  <div className="admin-actions">
                    <button 
                      className="admin-btn primary"
                      onClick={() => setEditingProduct('new')}
                    >
                      ‚ûï ÏÉà ÏÉÅÌíà Ï∂îÍ∞Ä
                    </button>
                  </div>
                  
                  <div className="products-table">
                    <div className="table-header">
                      <span>ÏÉÅÌíà</span>
                      <span>Í∞ÄÍ≤©</span>
                      <span>Ïû¨Í≥†</span>
                      <span>Ïπ¥ÌÖåÍ≥†Î¶¨</span>
                      <span>Í¥ÄÎ¶¨</span>
                    </div>
                    {products.map(product => (
                      <div key={product.id} className="table-row">
                        <div className="product-cell">
                          <span className="product-emoji">{product.image}</span>
                          {product.name}
                        </div>
                        <div>{product.price.toLocaleString()}Ïõê</div>
                        <div>
                          <input 
                            type="number" 
                            value={product.stock}
                            onChange={(e) => updateProductStock(product.id, parseInt(e.target.value))}
                            className="stock-input"
                          />
                        </div>
                        <div>{product.category}</div>
                        <div className="action-buttons">
                          <button 
                            className="edit-btn"
                            onClick={() => setEditingProduct(product)}
                          >
                            ‚úèÔ∏è
                          </button>
                          <button 
                            className="delete-btn"
                            onClick={() => deleteProduct(product.id)}
                          >
                            üóëÔ∏è
                          </button>
                        </div>
                      </div>
                    ))}
                  </div>
                </div>

                {/* Ï£ºÎ¨∏ Í¥ÄÎ¶¨ */}
                <div className="admin-section">
                  <h4>üìã Ï£ºÎ¨∏ Í¥ÄÎ¶¨</h4>
                  <div className="orders-list">
                    {orders.length === 0 ? (
                      <div className="no-orders">
                        <p>ÏïÑÏßÅ Ï£ºÎ¨∏Ïù¥ ÏóÜÏäµÎãàÎã§.</p>
                      </div>
                    ) : (
                      orders.map(order => (
                        <div key={order.id} className="order-item">
                          <div className="order-info">
                            <span className="order-id">Ï£ºÎ¨∏ #{order.id}</span>
                            <span className="order-date">{order.date}</span>
                            <span className="order-amount">{order.amount.toLocaleString()}Ïõê</span>
                          </div>
                          <div className="order-status">
                            <select 
                              value={order.status}
                              onChange={(e) => updateOrderStatus(order.id, e.target.value)}
                            >
                              <option value="pending">ÎåÄÍ∏∞Ï§ë</option>
                              <option value="processing">Ï≤òÎ¶¨Ï§ë</option>
                              <option value="completed">ÏôÑÎ£å</option>
                              <option value="cancelled">Ï∑®ÏÜå</option>
                            </select>
                          </div>
                        </div>
                      ))
                    )}
                  </div>
                </div>

                {/* Îß§Ï∂ú Î∂ÑÏÑù */}
                <div className="admin-section">
                  <h4>üìä Îß§Ï∂ú Î∂ÑÏÑù</h4>
                  <div className="analytics-grid">
                    <div className="analytics-card">
                      <h5>Ïò§Îäò Î∞©Î¨∏Ïûê</h5>
                      <div className="analytics-value">{salesData.todayVisitors}Î™Ö</div>
                    </div>
                    <div className="analytics-card">
                      <h5>Ï¥ù ÌåêÎß§Îüâ</h5>
                      <div className="analytics-value">{salesData.totalSales}Í∞ú</div>
                    </div>
                    <div className="analytics-card">
                      <h5>Ïù¥Î≤à Îã¨ Îß§Ï∂ú</h5>
                      <div className="analytics-value">{salesData.monthlyRevenue.toLocaleString()}Ïõê</div>
                    </div>
                    <div className="analytics-card">
                      <h5>Ï¥ù Îß§Ï∂ú</h5>
                      <div className="analytics-value">{salesData.totalRevenue.toLocaleString()}Ïõê</div>
                    </div>
                  </div>
                </div>

                {/* Ïû¨Í≥† Í¥ÄÎ¶¨ */}
                <div className="admin-section">
                  <h4>üìà Ïû¨Í≥† ÌòÑÌô©</h4>
                  <div className="inventory-grid">
                    {products.map(product => (
                      <div key={product.id} className="inventory-card">
                        <div className="inventory-header">
                          <span className="product-emoji">{product.image}</span>
                          <span className="product-name">{product.name}</span>
                        </div>
                        <div className="inventory-status">
                          <div className={`stock-level ${product.stock <= 5 ? 'low' : product.stock <= 10 ? 'medium' : 'high'}`}>
                            Ïû¨Í≥†: {product.stock}Í∞ú
                          </div>
                          <div className="stock-actions">
                            <button 
                              className="stock-btn"
                              onClick={() => updateProductStock(product.id, product.stock + 10)}
                            >
                              +10
                            </button>
                            <button 
                              className="stock-btn"
                              onClick={() => updateProductStock(product.id, Math.max(0, product.stock - 5))}
                            >
                              -5
                            </button>
                          </div>
                        </div>
                      </div>
                    ))}
                  </div>
                </div>
              </div>
            </div>
          )}

          {/* Í¥ÄÎ¶¨Ïûê Î°úÍ∑∏Ïù∏ Î™®Îã¨ */}
          {activeTab === 'admin' && !isAdmin && (
            <div className="admin-login">
              <div className="login-form">
                <h3>üîê Í¥ÄÎ¶¨Ïûê Î°úÍ∑∏Ïù∏</h3>
                <p>Í¥ÄÎ¶¨Ïûê Ìå®ÎÑêÏóê Ï†ëÍ∑ºÌïòÎ†§Î©¥ ÎπÑÎ∞ÄÎ≤àÌò∏Î•º ÏûÖÎ†•ÌïòÏÑ∏Ïöî.</p>
                <input
                  type="password"
                  placeholder="Í¥ÄÎ¶¨Ïûê ÎπÑÎ∞ÄÎ≤àÌò∏"
                  value={adminPassword}
                  onChange={(e) => setAdminPassword(e.target.value)}
                  onKeyPress={(e) => e.key === 'Enter' && handleAdminLogin()}
                />
                <div className="login-actions">
                  <button 
                    className="login-btn"
                    onClick={handleAdminLogin}
                  >
                    Î°úÍ∑∏Ïù∏
                  </button>
                  <button 
                    className="cancel-btn"
                    onClick={() => setActiveTab('products')}
                  >
                    Ï∑®ÏÜå
                  </button>
                </div>
              </div>
            </div>
          )}

          {/* ÏÉÅÌíà Ìé∏Ïßë Î™®Îã¨ */}
          {editingProduct && (
            <div className="product-edit-modal">
              <div className="edit-form">
                <h3>{editingProduct === 'new' ? 'ÏÉà ÏÉÅÌíà Ï∂îÍ∞Ä' : 'ÏÉÅÌíà Ìé∏Ïßë'}</h3>
                <div className="form-grid">
                  <input
                    type="text"
                    placeholder="ÏÉÅÌíàÎ™Ö"
                    value={editingProduct === 'new' ? newProduct.name : editingProduct.name}
                    onChange={(e) => updateProductField('name', e.target.value)}
                  />
                  <input
                    type="number"
                    placeholder="Í∞ÄÍ≤©"
                    value={editingProduct === 'new' ? newProduct.price : editingProduct.price}
                    onChange={(e) => updateProductField('price', parseInt(e.target.value))}
                  />
                  <div className="emoji-input-container">
                    <div className="emoji-preview">
                      <span className="current-emoji">
                        {editingProduct === 'new' ? newProduct.image || 'üéÅ' : editingProduct.image || 'üéÅ'}
                      </span>
                      <button 
                        type="button"
                        className="emoji-select-btn"
                        onClick={() => setShowEmojiPicker(!showEmojiPicker)}
                      >
                        Ïù¥Î™®ÏßÄ ÏÑ†ÌÉù
                      </button>
                    </div>
                    {showEmojiPicker && (
                      <div className="emoji-picker">
                        <div className="emoji-picker-header">
                          <h4>Ïù¥Î™®ÏßÄÎ•º ÏÑ†ÌÉùÌïòÏÑ∏Ïöî</h4>
                          <button 
                            type="button"
                            className="close-picker-btn"
                            onClick={() => setShowEmojiPicker(false)}
                          >
                            ‚úï
                          </button>
                        </div>
                        <div className="emoji-grid">
                          {getCurrentEmojis().map((emoji, index) => (
                            <button
                              key={index}
                              type="button"
                              className="emoji-option"
                              onClick={() => selectEmoji(emoji)}
                            >
                              {emoji}
                            </button>
                          ))}
                        </div>
                      </div>
                    )}
                  </div>
                  <select
                    value={editingProduct === 'new' ? newProduct.category : editingProduct.category}
                    onChange={(e) => updateProductField('category', e.target.value)}
                  >
                    <option value="avatar">ÏïÑÎ∞îÌÉÄ</option>
                    <option value="emoticon">Ïù¥Î™®Ìã∞ÏΩò</option>
                    <option value="space">Í≥µÍ∞Ñ</option>
                    <option value="effect">Ìö®Í≥º</option>
                    <option value="voice">ÏùåÏÑ±</option>
                    <option value="chat">Ï±ÑÌåÖ</option>
                    <option value="companion">Ïª¥Ìå®ÎãàÏñ∏</option>
                  </select>
                  <input
                    type="number"
                    placeholder="Ïû¨Í≥†"
                    value={editingProduct === 'new' ? newProduct.stock : editingProduct.stock}
                    onChange={(e) => updateProductField('stock', parseInt(e.target.value))}
                  />
                  <textarea
                    placeholder="ÏÉÅÌíà ÏÑ§Î™Ö"
                    value={editingProduct === 'new' ? newProduct.description : editingProduct.description}
                    onChange={(e) => updateProductField('description', e.target.value)}
                    rows="3"
                  />
                </div>
                <div className="modal-actions">
                  <button 
                    className="save-btn"
                    onClick={saveProduct}
                  >
                    {editingProduct === 'new' ? 'Ï∂îÍ∞Ä' : 'Ï†ÄÏû•'}
                  </button>
                  <button 
                    className="cancel-btn"
                    onClick={() => setEditingProduct(null)}
                  >
                    Ï∑®ÏÜå
                  </button>
                </div>
              </div>
            </div>
          )}

          {/* Î©ÄÌã∞ Í≤∞Ï†ú Î™®Îã¨ */}
          {showPaymentModal && (
            <div className="payment-modal">
              {shopInfo.paymentEnabled ? (
                <MultiPayment
                  amount={getTotalPrice()}
                  onSuccess={handlePaymentSuccess}
                  onError={handlePaymentError}
                  onCancel={handlePaymentCancel}
                  shopOwnerId={shopInfo.ownerId}
                  roomData={currentMap || roomData}
                />
              ) : (
                <div className="payment-disabled">
                  <h3>Í≤∞Ï†ú ÏãúÏä§ÌÖú ÎØ∏ÏÑ§Ï†ï</h3>
                  <p>Ïù¥ ÏáºÌïëÎ™∞ÏùÄ ÏïÑÏßÅ Í≤∞Ï†ú ÏãúÏä§ÌÖúÏù¥ ÏÑ§Ï†ïÎêòÏßÄ ÏïäÏïòÏäµÎãàÎã§.</p>
                  {shopInfo.isOwnShop ? (
                    <div>
                      <p>ÏÑ§Ï†ï ÌÉ≠ÏóêÏÑú ÌÜ†Ïä§ÌéòÏù¥Î®ºÏ∏† ÎòêÎäî PortOne Í≤∞Ï†úÎ•º ÏÑ§Ï†ïÌï¥Ï£ºÏÑ∏Ïöî.</p>
                      <button 
                        onClick={() => {
                          setShowPaymentModal(false);
                          setActiveTab('settings');
                        }}
                        className="setup-payment-btn"
                      >
                        Í≤∞Ï†ú ÏÑ§Ï†ïÌïòÍ∏∞
                      </button>
                    </div>
                  ) : (
                    <p>ÏáºÌïëÎ™∞ Ïö¥ÏòÅÏûêÍ∞Ä Í≤∞Ï†ú ÏãúÏä§ÌÖúÏùÑ ÏÑ§Ï†ïÌï¥Ïïº Ìï©ÎãàÎã§.</p>
                  )}
                  <button onClick={handlePaymentCancel} className="cancel-button">
                    Îã´Í∏∞
                  </button>
                </div>
              )}
            </div>
          )}
        </div>
      </div>
    </div>
  );
};

// Î©ÄÌã∞ Í≤∞Ï†ú ÏÑ§Ï†ï Ïª¥Ìè¨ÎÑåÌä∏
const MultiPaymentSettingsSection = ({ shopOwnerId, onConfigUpdate }) => {
  const [paymentConfig, setPaymentConfig] = useState({
    tossPayments: { clientKey: '', secretKey: '', isActive: false },
    portOne: { storeId: '', channelKey: '', isActive: false },
    preferredProvider: 'toss',
    autoSelectByRegion: true
  });
  const [isEditing, setIsEditing] = useState(false);
  const [saving, setSaving] = useState(false);
  const [activeTab, setActiveTab] = useState('toss');

  useEffect(() => {
    // ÌòÑÏû¨ ÏÑ§Ï†ï Î°úÎìú
    const currentConfig = paymentConfigService.getUserConfig(shopOwnerId);
    setPaymentConfig(currentConfig);
  }, [shopOwnerId]);

  const handleSave = async () => {
    setSaving(true);
    try {
      // ÏÑ§Ï†ï Ïú†Ìö®ÏÑ± Í≤ÄÏÇ¨
      const validation = paymentConfigService.validateConfig(paymentConfig);
      if (!validation.isValid) {
        alert(validation.errors.join('\n'));
        return;
      }

      // ÏÑ§Ï†ï Ï†ÄÏû•
      paymentConfigService.setUserConfig(shopOwnerId, paymentConfig);
      setIsEditing(false);
      onConfigUpdate();
      
      // ÏÑ±Í≥µ ÏïåÎ¶º
      showSuccessNotification('Í≤∞Ï†ú ÏÑ§Ï†ïÏù¥ Ï†ÄÏû•ÎêòÏóàÏäµÎãàÎã§!');
    } catch (error) {
      alert('ÏÑ§Ï†ï Ï†ÄÏû• Ï§ë Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§: ' + error.message);
    } finally {
      setSaving(false);
    }
  };

  const handleTestConfig = () => {
    // ÌÖåÏä§Ìä∏ ÏÑ§Ï†ï ÏÉùÏÑ±
    const testConfig = paymentConfigService.createTestConfig(shopOwnerId);
    setPaymentConfig(testConfig);
    onConfigUpdate();
    showSuccessNotification('ÌÖåÏä§Ìä∏ ÏÑ§Ï†ïÏù¥ ÏÉùÏÑ±ÎêòÏóàÏäµÎãàÎã§!');
  };

  const showSuccessNotification = (message) => {
    const notification = document.createElement('div');
    notification.style.cssText = `
      position: fixed;
      top: 20px;
      right: 20px;
      background: linear-gradient(135deg, #4CAF50, #45a049);
      color: white;
      padding: 12px 20px;
      border-radius: 25px;
      z-index: 3000;
      font-weight: 600;
      box-shadow: 0 4px 15px rgba(76, 175, 80, 0.3);
    `;
    notification.textContent = message;
    document.body.appendChild(notification);
    
    setTimeout(() => {
      notification.remove();
    }, 3000);
  };

  const updateTossConfig = (field, value) => {
    setPaymentConfig(prev => ({
      ...prev,
      tossPayments: { ...prev.tossPayments, [field]: value }
    }));
  };

  const updatePortOneConfig = (field, value) => {
    setPaymentConfig(prev => ({
      ...prev,
      portOne: { ...prev.portOne, [field]: value }
    }));
  };

  return (
    <div className="setting-group payment-settings">
      <h4>üí≥ Í≤∞Ï†ú ÏãúÏä§ÌÖú ÏÑ§Ï†ï</h4>
      <p>ÌÜ†Ïä§ÌéòÏù¥Î®ºÏ∏†(Íµ≠ÎÇ¥)ÏôÄ PortOne(Ìï¥Ïô∏) Í≤∞Ï†ú Ïó∞Îèô ÏÑ§Ï†ï</p>
      
      {isEditing ? (
        <div className="payment-config-form">
          {/* Í≤∞Ï†ú Ï†úÍ≥µÏûê ÌÉ≠ */}
          <div className="provider-tabs">
            <button 
              type="button"
              className={`provider-tab ${activeTab === 'toss' ? 'active' : ''}`}
              onClick={() => setActiveTab('toss')}
            >
              üí≥ ÌÜ†Ïä§ÌéòÏù¥Î®ºÏ∏†
            </button>
            <button 
              type="button"
              className={`provider-tab ${activeTab === 'portone' ? 'active' : ''}`}
              onClick={() => setActiveTab('portone')}
            >
              üåç PortOne
            </button>
          </div>

          {/* ÌÜ†Ïä§ÌéòÏù¥Î®ºÏ∏† ÏÑ§Ï†ï */}
          {activeTab === 'toss' && (
            <div className="provider-config">
              <h5>ÌÜ†Ïä§ÌéòÏù¥Î®ºÏ∏† ÏÑ§Ï†ï (Íµ≠ÎÇ¥ Í≥†Í∞ù Ï∂îÏ≤ú)</h5>
              <div className="form-group">
                <label>ÌÅ¥ÎùºÏù¥Ïñ∏Ìä∏ ÌÇ§ *</label>
                <input
                  type="text"
                  value={paymentConfig.tossPayments.clientKey}
                  onChange={(e) => updateTossConfig('clientKey', e.target.value)}
                  placeholder="test_ck_... ÎòêÎäî live_ck_..."
                />
              </div>
              <div className="form-group">
                <label>ÏãúÌÅ¨Î¶ø ÌÇ§</label>
                <input
                  type="password"
                  value={paymentConfig.tossPayments.secretKey}
                  onChange={(e) => updateTossConfig('secretKey', e.target.value)}
                  placeholder="test_sk_... ÎòêÎäî live_sk_..."
                />
              </div>
              <div className="form-group">
                <label>
                  <input
                    type="checkbox"
                    checked={paymentConfig.tossPayments.isActive}
                    onChange={(e) => updateTossConfig('isActive', e.target.checked)}
                  />
                  ÌÜ†Ïä§ÌéòÏù¥Î®ºÏ∏† ÌôúÏÑ±Ìôî
                </label>
              </div>
            </div>
          )}

          {/* PortOne ÏÑ§Ï†ï */}
          {activeTab === 'portone' && (
            <div className="provider-config">
              <h5>PortOne ÏÑ§Ï†ï (Ìï¥Ïô∏ Í≥†Í∞ù Ï∂îÏ≤ú)</h5>
              <div className="form-group">
                <label>Ïä§ÌÜ†Ïñ¥ ID *</label>
                <input
                  type="text"
                  value={paymentConfig.portOne.storeId}
                  onChange={(e) => updatePortOneConfig('storeId', e.target.value)}
                  placeholder="store_..."
                />
              </div>
              <div className="form-group">
                <label>Ï±ÑÎÑê ÌÇ§ *</label>
                <input
                  type="text"
                  value={paymentConfig.portOne.channelKey}
                  onChange={(e) => updatePortOneConfig('channelKey', e.target.value)}
                  placeholder="channel_..."
                />
              </div>
              <div className="form-group">
                <label>
                  <input
                    type="checkbox"
                    checked={paymentConfig.portOne.isActive}
                    onChange={(e) => updatePortOneConfig('isActive', e.target.checked)}
                  />
                  PortOne ÌôúÏÑ±Ìôî
                </label>
              </div>
            </div>
          )}

          {/* Í≥µÌÜµ ÏÑ§Ï†ï */}
          <div className="common-settings">
            <h5>Í≥µÌÜµ ÏÑ§Ï†ï</h5>
            <div className="form-group">
              <label>ÏÑ†Ìò∏ÌïòÎäî Í≤∞Ï†ú Ï†úÍ≥µÏûê</label>
              <select
                value={paymentConfig.preferredProvider}
                onChange={(e) => setPaymentConfig({...paymentConfig, preferredProvider: e.target.value})}
              >
                <option value="toss">ÌÜ†Ïä§ÌéòÏù¥Î®ºÏ∏†</option>
                <option value="portone">PortOne</option>
              </select>
            </div>
            <div className="form-group">
              <label>
                <input
                  type="checkbox"
                  checked={paymentConfig.autoSelectByRegion}
                  onChange={(e) => setPaymentConfig({...paymentConfig, autoSelectByRegion: e.target.checked})}
                />
                ÏßÄÏó≠Î≥Ñ ÏûêÎèô ÏÑ†ÌÉù (Íµ≠ÎÇ¥: ÌÜ†Ïä§ÌéòÏù¥Î®ºÏ∏†, Ìï¥Ïô∏: PortOne)
              </label>
            </div>
          </div>
          
          <div className="payment-actions">
            <button 
              onClick={handleSave}
              disabled={saving}
              className="save-btn"
            >
              {saving ? 'Ï†ÄÏû• Ï§ë...' : 'Ï†ÄÏû•'}
            </button>
            <button 
              onClick={() => setIsEditing(false)}
              className="cancel-btn"
            >
              Ï∑®ÏÜå
            </button>
          </div>
        </div>
      ) : (
        <div className="payment-config-display">
          <div className="config-status">
            <span className="config-label">ÌÜ†Ïä§ÌéòÏù¥Î®ºÏ∏†:</span>
            <span className={`config-value ${paymentConfig.tossPayments?.isActive ? 'active' : 'inactive'}`}>
              {paymentConfig.tossPayments?.isActive ? 'ÌôúÏÑ±ÌôîÎê®' : 'ÎπÑÌôúÏÑ±ÌôîÎê®'}
            </span>
          </div>
          
          <div className="config-status">
            <span className="config-label">PortOne:</span>
            <span className={`config-value ${paymentConfig.portOne?.isActive ? 'active' : 'inactive'}`}>
              {paymentConfig.portOne?.isActive ? 'ÌôúÏÑ±ÌôîÎê®' : 'ÎπÑÌôúÏÑ±ÌôîÎê®'}
            </span>
          </div>
          
          <div className="config-detail">
            <span className="config-label">ÏÑ†Ìò∏ Ï†úÍ≥µÏûê:</span>
            <span className="config-value">
              {paymentConfig.preferredProvider === 'toss' ? 'ÌÜ†Ïä§ÌéòÏù¥Î®ºÏ∏†' : 'PortOne'}
            </span>
          </div>
          
          <div className="payment-actions">
            <button onClick={() => setIsEditing(true)} className="edit-btn">
              ÏÑ§Ï†ï Ìé∏Ïßë
            </button>
            <button onClick={handleTestConfig} className="test-btn">
              ÌÖåÏä§Ìä∏ ÏÑ§Ï†ï ÏÉùÏÑ±
            </button>
          </div>
        </div>
      )}
    </div>
  );
};

export default PersonalShop;